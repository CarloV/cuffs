// Generated by LiveScript 1.4.0
(function(){
  var MultiArrayExplorer;
  exports.MultiArrayExplorer = MultiArrayExplorer = (function(){
    MultiArrayExplorer.displayName = 'MultiArrayExplorer';
    var prototype = MultiArrayExplorer.prototype, constructor = MultiArrayExplorer;
    function MultiArrayExplorer(arr, index){
      this.arr = arr != null
        ? arr
        : [];
      this.index = index != null
        ? index
        : [];
    }
    prototype.up = function(i){
      i == null && (i = 0);
      this.index = this.index.concat([i]);
      return this;
    };
    prototype.down = function(){
      this.index = this.index.slice(0, -1);
      if (this.index.length === 0) {
        throw new Error("Can't go further down in the structure");
      }
      return this;
    };
    prototype.left = function(){
      var ref$;
      (ref$ = this.index)[ref$.length - 1] -= 1;
      return this;
    };
    prototype.right = function(){
      var ref$;
      (ref$ = this.index)[ref$.length - 1] += 1;
      return this;
    };
    prototype.get = function(){
      var a, i$, ref$, len$, i;
      a = this.arr;
      for (i$ = 0, len$ = (ref$ = this.index).length; i$ < len$; ++i$) {
        i = ref$[i$];
        a = a[i];
        if (a == null) {
          return;
        }
      }
      return a;
    };
    prototype.set = function(o){
      var a, i$, ref$, len$, i;
      a = this.arr;
      for (i$ = 0, len$ = (ref$ = this.index.slice(0, -1)).length; i$ < len$; ++i$) {
        i = ref$[i$];
        a = a[i];
      }
      a[(ref$ = this.index)[ref$.length - 1]] = o;
      return this;
    };
    prototype.wrap = function(){
      var a, i$, ref$, len$, i;
      a = this.arr;
      for (i$ = 0, len$ = (ref$ = this.index.slice(0, -1)).length; i$ < len$; ++i$) {
        i = ref$[i$];
        a = a[i];
      }
      a[(ref$ = this.index)[ref$.length - 1]] = [a[(ref$ = this.index)[ref$.length - 1]]];
      return this;
    };
    prototype.prop = function(key, value){
      var a, i$, ref$, len$, i;
      a = this.arr;
      for (i$ = 0, len$ = (ref$ = this.index).length; i$ < len$; ++i$) {
        i = ref$[i$];
        a = a[i];
      }
      if (value != null) {
        a[key] = value;
        return this;
      } else {
        if (a != null) {
          return a[key];
        } else {
          return a;
        }
      }
    };
    prototype.parentProp = function(key, value){
      var a, i$, ref$, len$, i;
      a = this.arr;
      for (i$ = 0, len$ = (ref$ = this.index.slice(0, -1)).length; i$ < len$; ++i$) {
        i = ref$[i$];
        a = a[i];
      }
      if (value != null) {
        a[key] = value;
        return this;
      } else {
        if (a != null) {
          return a[key];
        } else {
          return a;
        }
      }
    };
    prototype.getInheritedProp = function(key){
      var a, p, i$, ref$, len$, i;
      a = this.arr;
      p = null;
      for (i$ = 0, len$ = (ref$ = this.index).length; i$ < len$; ++i$) {
        i = ref$[i$];
        if (a != null && a[key] != null) {
          p = a[key];
        }
        a = a[i];
      }
      if (a != null && a[key] != null) {
        p = a[key];
      }
      return p;
    };
    prototype.getInheritedParentProp = function(key){
      var a, p, i$, ref$, len$, i;
      a = this.arr;
      p = null;
      for (i$ = 0, len$ = (ref$ = this.index.slice(0, -1)).length; i$ < len$; ++i$) {
        i = ref$[i$];
        if (a != null && a[key] != null) {
          p = a[key];
        }
        a = a[i];
      }
      if (a != null && a[key] != null) {
        p = a[key];
      }
      return p;
    };
    return MultiArrayExplorer;
  }());
}).call(this);
